// Premium service plugin for BBS Core-UI.
const premiumServer = 'http://localhost:8000';

// This will be replaced by the server.
const filePath = null;
if(!filePath) throw new Error('filePath is not defined');

// Try to import bbs-common from our server, defaulting to the CDN if that fails.
const getBbsCommon = async() => {
    let isRemote = false;
    const bbs = await import(`${premiumServer}/site/bbs-common.js`).catch(() => {
        isRemote = true;
        return import('https://cdn.jsdelivr.net/npm/@dewebio/bbs-common@latest/index.min.js');
    });
    console.info(`bbs-common library loaded from ${isRemote ? 'remote CDN' : 'local file'}`, bbs);

    return bbs;
};

// Get the right player.
const makePlayer = async(productDetails) => {
    let player = null;
    if(productDetails.signedUrl) {
        if(productDetails.type === 'video') {
            player = document.createElement('video');
        } else if(productDetails.type === 'audio') {
            player = document.createElement('audio');
        } else if(productDetails.type === 'image') {
            player = document.createElement('img');
        } else {
            throw new Error('Unsupported file type');
        }
        player.src = productDetails.signedUrl;
        player.controls = true;
    } else {
        player = document.createElement('img');
        player.src = productDetails.previewUrl;
        player.addEventListener('click', () => {
            window.open(productDetails.purchaseUrl, '_blank');
        });
    }
    return player;
};

// Define Single SPA lifecycle entry points as AMD modules.
define({
    mount: async(sspaArgs) => {
        const bbs = await getBbsCommon();
        const authToken = await bbs.getAuthToken();
        const productDetails = await (await fetch(`${premiumServer}/productDetails?path=${filePath}`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({filePath, authToken})
        })).json();
        const ui = document.createElement('div');
        ui.appendChild(await makePlayer(productDetails));
        sspaArgs.domElement.appendChild(ui);
    },
    // We are not currently using these lifecycle functions.
    bootstrap: async() => {},
    unmount: async() => {},
    unload: async() => {}
});

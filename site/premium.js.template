// Premium service plugin for BBS Core-UI.
(async() => {
    const premiumServer = 'http://localhost:8000';

    // This will be replaced by the server.
    const slug = null;
    if(!slug) throw new Error('slug is not defined');

    // Try to import bbs-common from our server, defaulting to the CDN if that fails.
    const getBbsCommon = async() => {
        let isRemote = false;
        const bbs = await import(`${premiumServer}/site/bbs-common.js`).catch(() => {
            isRemote = true;
            return import('https://cdn.jsdelivr.net/npm/@dewebio/bbs-common@latest/index.min.js');
        });
        console.info(`bbs-common library loaded from ${isRemote ? 'remote CDN' : 'local file'}`, bbs);

        return bbs;
    };

    // Get the right player.
    const makePlayer = async(productDetails, authToken) => {
        let player = null;
        if(productDetails.signedUrl) {
            if(productDetails.type === 'video') {
                player = document.createElement('video');
            } else if(productDetails.type === 'audio') {
                player = document.createElement('audio');
            } else if(productDetails.type === 'image') {
                player = document.createElement('img');
            } else {
                throw new Error('Unsupported file type');
            }
            player.src = productDetails.signedUrl;
            player.controls = true;
        } else {
            player = document.createElement('img');
            player.src = productDetails.previewUrl;
            player.addEventListener('click', async(event) => {
                event.stopPropagation();
                const loginUrl = await (await fetch(`${premiumServer}/loginUrl`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({authToken, redirectUrl: 'https://subbscribe.com/product/' + slug})
                })).text();
                window.open(loginUrl, '_blank');
            });
        }
        return player;
    };

    // Show the player UI in the given domElement.
    const show = async(domElement) => {
        const bbs = await getBbsCommon();
        const authToken = await bbs.getAuthToken();
        const productDetails = await (await fetch(`${premiumServer}/productDetails?slug=${slug}`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({slug, authToken})
        })).json();
        const ui = document.createElement('div');
        ui.appendChild(await makePlayer(productDetails, authToken));
        domElement.appendChild(ui);
    };

    // Define Single SPA lifecycle entry points as AMD modules.
    define({
        mount: async(sspaArgs) => new Promise((resolve, reject) => {
            try {
                show(sspaArgs.domElement).then(resolve).catch(reject);
            } catch(error) {
                console.error(error);
                sspaArgs.domElement.textContent = error.message;
                reject(error);
            }
        }),
        // We are not currently using these lifecycle functions but they are required by Single SPA.
        bootstrap: async() => {},
        unmount: async() => {}
    });
})();

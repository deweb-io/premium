// Premium service plugin for BBS Core-UI.
(async() => {
    // This will be replaced by the server.
    const premiumServer = null;
    if(!premiumServer) throw new Error('premiumServer is not defined');
    const slug = null;
    if(!slug) throw new Error('slug is not defined');

    // Get the right player.
    const makePlayer = async(productDetails, authToken) => {
        let player = null;
        if(productDetails.file) {
            if(productDetails.file.endsWith('.mp4') || productDetails.file.endsWith('.webm')) {
                player = document.createElement('video');
            } else if(productDetails.file.endsWith('.mp3')) {
                player = document.createElement('audio');
            } else if(
                productDetails.file.endsWith('.jpg') ||
                productDetails.file.endsWith('.jpeg') ||
                productDetails.file.endsWith('.png')
            ) {
                player = document.createElement('img');
            } else {
                throw new Error('Unsupported file type');
            }
            player.src = productDetails.file;
            player.controls = true;
        } else {
            player = document.createElement('img');
            player.src = productDetails.image;
            player.addEventListener('click', async(event) => {
                event.stopPropagation();
                const loginResponse = await fetch(`${premiumServer}/login/${productDetails.subscriptionSlug}`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({authToken})
                });
                if(loginResponse.status === 200) {
                    window.open((await loginResponse.json()).url, '_blank');
                }
            });
        }
        return player;
    };

    // Show the player UI in the given domElement.
    const show = async(domElement, authToken) => {
        try {
            const productDetails = await (await fetch(`${premiumServer}/product/${slug}`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({authToken})
            })).json();
            if(productDetails.error) throw new Error(productDetails.error);
            const ui = document.createElement('div');
            ui.appendChild(await makePlayer(productDetails, authToken));
            domElement.appendChild(ui);
        } catch(error) {
            console.error(error);
            domElement.textContent = error.message;
            throw error;
        }
    };

    // Define Single SPA lifecycle entry points as AMD modules.
    define({
        mount: async(sspaArgs) => new Promise((resolve, reject) => {
            try {
                show(sspaArgs.domElement, sspaArgs.authToken).then(resolve).catch(reject);
            } catch(error) {
                console.error(error);
                sspaArgs.domElement.textContent = error.message;
                reject(error);
            }
        }),
        // We are not currently using these lifecycle functions but they are required by Single SPA.
        bootstrap: async() => {},
        unmount: async() => {}
    });
})();
